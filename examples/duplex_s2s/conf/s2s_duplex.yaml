model:
  #pretrained_llm: TinyLlama/TinyLlama_v1.1
#  pretrained_llm: google/gemma-2-2b-it
#  pretrained_llm: google/gemma-2-9b-it
#  pretrained_llm: meta-llama/Llama-3.2-3B-Instruct
#  pretrained_llm: meta-llama/Llama-3.1-8B-Instruct
  pretrained_llm: Qwen/Qwen2.5-7B-Instruct
  pretrained_audio_codec: nvidia/low-frame-rate-speech-codec-22khz
  pretrained_asr: stt_en_fastconformer_transducer_large

  perception:
     target: nemo.collections.multimodal.speech_llm.modules.perception_modules.AudioPerceptionModule

     preprocessor:
       normalize: 'NA'

     encoder:
       self_attention_model:
       att_context_size: [70, 1]
       conv_context_size: causal
       conv_norm_type: layer_norm

     modality_adapter:
       _target_: nemo.collections.asr.modules.ConformerEncoder
       feat_in: 512
       feat_out: -1 # you may set it if you need different output size other than the default d_model
       n_layers: 2
       d_model: 512
       subsampling: dw_striding # vggnet, striding, stacking or stacking_norm, dw_striding
       subsampling_factor: 1 # must be power of 2 for striding and vggnet
       subsampling_conv_channels: 256 # set to -1 to make it equal to the d_model
       causal_downsampling: true
       ff_expansion_factor: 4
       self_attention_model: rel_pos_local_attn # rel_pos or abs_pos
       n_heads: 8 # may need to be lower for smaller d_models
       # [left, right] specifies the number of steps to be seen from left and right of each step in self-attention
       att_context_size: [70, 1] # -1 means unlimited context
       att_context_style: chunked_limited # regular or chunked_limited
       xscaling: true # scales up the input embeddings by sqrt(d_model)
       untie_biases: true # unties the biases of the TransformerXL layers
       pos_emb_max_len: 5000
       conv_kernel_size: 9
       conv_norm_type: layer_norm # batch_norm or layer_norm or groupnormN (N specifies the number of groups)
       # conv_context_size can be"causal" or a list of two integers while conv_context_size[0]+conv_context_size[1]+1==conv_kernel_size
       # null means [(kernel_size-1)//2, (kernel_size-1)//2], and 'causal' means [(kernel_size-1), 0]
       conv_context_size: causal
       ### regularization
       dropout: 0.1 # The dropout used in most of the Conformer Modules
       dropout_pre_encoder: 0.1 # The dropout used before the encoder
       dropout_emb: 0.0 # The dropout used for embeddings
       dropout_att: 0.1 # The dropout for multi-headed attention modules

     spec_augment:
       _target_: nemo.collections.asr.modules.SpectrogramAugmentation
       freq_masks: 2 # set to zero to disable it
       time_masks: 10 # set to zero to disable it
       freq_width: 27
       time_width: 0.05

  optim:
    name: adamw
    lr: 1e-3
    betas: [0.9, 0.98]
    weight_decay: 1e-3

    sched:
      name: CosineAnnealing
      warmup_steps: 15000
      warmup_ratio: null
      min_lr: 1e-4

trainer:
  devices: -1
  accelerator: gpu
  num_nodes: 1
  precision: bf16-true
  logger: False # logger provided by exp_manager
  enable_checkpointing: False
  use_distributed_sampler: False
  max_steps: 1000000 # consumed_samples = global_step * micro_batch_size * data_parallel_size * accumulate_grad_batches
  limit_train_batches: 1000000
  log_every_n_steps: 10 # frequency with which training steps are logged
  val_check_interval: 1000 # If is an int n > 1, will run val every n training steps, if a float 0.0 - 1.0 will run val every epoch fraction, e.g. 0.25 will run val every quarter   epoch
#  gradient_clip_val: 1.0
  accumulate_grad_batches: 4
  strategy:
    _target_: lightning.pytorch.strategies.ModelParallelStrategy
    tensor_parallel_size: 1
    data_parallel_size: 2
#    _target_: lightning.pytorch.strategies.DDPStrategy
#    gradient_as_bucket_view: true
#    find_unused_parameters: true

data:
  frame_length: 0.08
  source_sample_rate: 16000

  train_ds:
    sample_rate: 22050
    shar_path: /home/pzelasko/exp/duplex_s2s/shar_duplex_manifest_000000
    seed: 42
    shard_seed: "randomized"
    num_workers: 2

#    batch_size: 1
#    batch_duration: 600
    batch_duration: 150
    use_bucketing: true
    num_buckets: 5
    bucket_buffer_size: 5000

  validation_ds:
    sample_rate: 22050
    shar_path: /home/pzelasko/exp/duplex_s2s/shar_duplex_manifest_val
    batch_size: 2
    seed: 42
    shard_seed: "randomized"
